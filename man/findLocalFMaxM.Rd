% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mainFunctions.R
\name{findLocalFMaxM}
\alias{findLocalFMaxM}
\title{findLocalFMaxM}
\usage{
findLocalFMaxM(obj, k, cutoff)
}
\arguments{
\item{obj}{The F statistic object, a matrix of size (number of Fourier frequencies) x (number of polynomial degrees)}

\item{k}{The number of tapers used to compute the polynomial F statistics.}

\item{cutoff}{The threshold above which we want to find local maxima.}
}
\value{
MAXES A list of size P, where P is the number of polynomial degrees for which the F statistics were computed. Each element of the list contains the indices corresponding to the Fourier frequencies where local maxima can be found.
}
\description{
Finds local maxima that exceed a given threshold, typically a percentile of an F distribution.
}
\details{
The function finds all the indices that are above the provided cutoff. The local maxima are the turning points of this set of indices. That is, the local maxima are the points above the threshold that are greater than the points just before and just after them.
}
\examples{
N <- 1024
nFFT <- 2^ceiling(log2(2*N))
NW <- 4
K <- 2*NW - 1
P <- 3

dpssIN <- dpss(N,K,NW,returnEigenvalues=FALSE)
apIN <- apDeriv(V = dpssIN$v, maxdeg = P, alpha = 0.75)
derivIN <- dpssDeriv(DW = dpssIN, NW = NW)

noiz <- rnorm(N)
n <- 0:(N-1)
A <- 0.5
freq <- seq(1/nFFT, 0.5, by = 1/nFFT)
f <- freq[nFFT/2]
B <- 0.0025
tt <- 2 * n / (N-1) - 1
FMpoly <- B * (1 - 2 * tt^2)
PhMod <- 2*pi*f*n + 2*pi*cumsum(FMpoly)
sig <- A * cos(PhMod)
x <- sig + noiz

mF <- ModulatedF(x, K, NW, P, alpha = 0.75, dpssIN = dpssIN, apIN = apIN, derivIN = derivIN)

maxes <- findLocalFMaxM(mF$ModF,K,cutoff=1-1/N)
}
\references{
Blanchette, Kian. Multitaper statistical tests for the detection of frequency-modulated signals. MSc. Thesis. Queen's University (Canada), 2020
}
